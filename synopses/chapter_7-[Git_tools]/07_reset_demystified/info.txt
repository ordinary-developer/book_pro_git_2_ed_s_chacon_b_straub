 reset demystified
 #################

 the three trees
 ===============

 Git as a system manages and manipulates three trees 
 in its normal operation:


 HEAD
 ----

 "HEAD" is the pointer to the current branch reference, which is in 
 turn a pointer to the last commit made on that branch;

 "HEAD" will be the parent of the next commit that is created

 it is simplest to think of HEAD as the snapshot 
 of your last commit


 the index
 ---------

 the index is your proposed next commit
 (you can also refer to this concept as Git's "Staging Area")


 the working directory
 ---------------------

 think of the Workind Directory as a sandbox, where you can try
 changes out before committing them to your staging area (index)
 and then to history




 the "reset" command
 ===================

 step 1: move head
 -----------------

 the first thing "reset" will do is move what HEAD points to

 this isn't the same as chaning HEAD itself 
 (which is what "checkout" does);
 "reset" moves the branch that HEAD is pointing to;
 this means if HEAD is set to the master branch (i.e. you're currently
 on the master branch) running 
 "git reset 9e5e64a" 
 will start by making "master" point to "9e5e64a"

 with "reset --soft" it will simply stop there

 after the next command:
 --------------------------------
 | $ git reset --soft HEAD~     |
 --------------------------------
 you are moving the branch back to where it was,
 without changing the "Index" or "Working Directory".

 you can now update the "Index" and run "git commit" again
 to accomplish what "git commit --amend" would have done.
 Is,st's like a very small rebase - don't ammend you last commit
 if you've already pushed it 

 summary: you undid your last commit


 step 2: updating the index (with --mixed)
 -----------------------------------------

 the next thing "reset" will do is 
 to update the index with the contents
 of whatever shnapshot HEAD now points to
 
 if you specify the "--mixed" option, "reset" will stop at this point

 after the next command:
 --------------------------------
 | $ git reset --mixed HEAD~    |
 --------------------------------
 it still undid your last commit, but alos unstaged everything

 summary: you undid your last commit 
          and your "git add" and "git commit" commands


 step 3: updating the working directory (with --hard)
 ----------------------------------------------------

 the third thing that "reset" will do is to make the Working Directory
 look like the Index

 if you use the "--hard" option, it will continue to this stage

 summary: you undid your last commit 
          and your "git add" and "git commit" commands
          and all the work you did in your working directory

 
 recap
 -----

 the "reset" command overwrites these three trees in a specific order,
 stopping when you tell it to:

 1. move the branch HEAD points to (stop here if --soft)
 2. make the index look like HEAD (stop here unless --hard)
 3. make the working directory look like the Index
